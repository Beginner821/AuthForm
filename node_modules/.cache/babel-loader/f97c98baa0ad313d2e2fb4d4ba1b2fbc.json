{"ast":null,"code":"import axios from \"axios\";\nimport { SET_AUTH, SET_ERROR, SET_USER_DATA } from \"./constants\";\naxios.defaults.baseURL = ' https://api.englishpatient.org';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\nlet initialState = {\n  user: {},\n  isAuth: false,\n  error: {\n    isError: false,\n    message: \"\"\n  }\n};\n\nlet userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        user: action.data\n      };\n\n    case SET_AUTH:\n      return { ...state,\n        isAuth: action.isAuth\n      };\n\n    case SET_ERROR:\n      return { ...state,\n        error: action\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuth = status => ({\n  type: SET_AUTH,\n  isAuth: status\n});\n\nconst setUsersData = data => ({\n  type: SET_USER_DATA,\n  data: data\n});\n\nexport const setError = (status, errorMessage) => ({\n  type: SET_ERROR,\n  isError: status,\n  errorMessage: errorMessage\n});\nexport const getUserToken = (email, password) => dispatch => {\n  axios.post(\"/login\", {\n    email,\n    password\n  }).then(response => {\n    if (response.data.token ? localStorage.setItem(\"token\", response.data.token) : dispatch(setError(true, response.data.error.message))) console.log(\"\");\n    dispatch(getUser());\n  });\n};\nexport const getUser = () => dispatch => {\n  axios.get(`/me?token=${localStorage.getItem(\"token\")}`).then(response => {\n    const user = response.data.result.user;\n    dispatch(setUsersData({\n      lastName: user.lastName,\n      firstName: user.firstName,\n      email: user.email\n    }));\n    dispatch(setAuth(true));\n  });\n};\nexport default userReducer;","map":{"version":3,"sources":["/home/daniil/github/q/src/Redux/reducer.js"],"names":["axios","SET_AUTH","SET_ERROR","SET_USER_DATA","defaults","baseURL","headers","common","initialState","user","isAuth","error","isError","message","userReducer","state","action","type","data","setAuth","status","setUsersData","setError","errorMessage","getUserToken","email","password","dispatch","post","then","response","token","localStorage","setItem","console","log","getUser","get","getItem","result","lastName","firstName"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {SET_AUTH, SET_ERROR, SET_USER_DATA} from \"./constants\";\n\naxios.defaults.baseURL = ' https://api.englishpatient.org';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\nlet initialState = {\n    user: {},\n    isAuth: false,\n    error: {\n        isError: false,\n        message: \"\"\n    }\n}\n\nlet userReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {...state, user: action.data}\n        case SET_AUTH:\n            return {...state, isAuth: action.isAuth}\n        case SET_ERROR:\n            return {...state, error: action}\n        default:\n            return state;\n    }\n};\n\nexport const setAuth = (status) => ({\n    type: SET_AUTH,\n    isAuth: status\n})\n\nconst setUsersData = (data) => ({\n    type: SET_USER_DATA,\n    data: data\n})\n\nexport const setError = (status, errorMessage) => ({\n    type: SET_ERROR,\n    isError: status,\n    errorMessage: errorMessage\n})\n\nexport const getUserToken = (email, password) => (\n    (dispatch) => {\n        axios.post(\"/login\", {email, password}).then(\n            response => {\n                if(response.data.token\n                    ? localStorage.setItem(\"token\", response.data.token)\n                    : dispatch(setError(true, response.data.error.message)))\n                    console.log(\"\")\n                dispatch(getUser());\n            }\n        )\n    }\n)\n\n\nexport const getUser = () => (\n    (dispatch) => {\n        axios.get(`/me?token=${localStorage.getItem(\"token\")}`).then(\n            response => {\n                const user = response.data.result.user\n                dispatch(setUsersData({lastName: user.lastName,\n                    firstName: user.firstName,\n                    email: user.email}));\n                dispatch(setAuth(true));\n            }\n        )\n    }\n)\n\nexport default userReducer;\n\n\n"]},"metadata":{},"sourceType":"module"}